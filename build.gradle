import static java.lang.System.getenv

plugins {
	id "com.avast.gradle.docker-compose" version "0.13.2"
	id 'org.springframework.boot' version '2.3.3.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
}

group = 'nl.jpoint'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

dockerCompose {
	// set to projectDir when PWD is empty (running from Intellij for example)
	environment.put("PWD", getenv("PWD") ?: projectDir)
	isRequiredBy(test)

	// enable following line when debugging container issues
	// captureContainersOutput(true)
}

test {
	useJUnitPlatform()
}

test.doFirst {
	// the postgres port is mapped to a random port number that is located in a map
	def dbPort = dockerCompose.servicesInfos.database.postgres_db.tcpPorts[5432]
	environment.put("spring.datasource.url", "jdbc:postgresql://localhost:$dbPort/postgres")
}
